// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/rds"
	"github.com/seattle-beach/cf-cli-rds-plugin/cf_rds"
)

type FakeRDSService struct {
	DescribeDBSubnetGroupsStub        func(input *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error)
	describeDBSubnetGroupsMutex       sync.RWMutex
	describeDBSubnetGroupsArgsForCall []struct {
		input *rds.DescribeDBSubnetGroupsInput
	}
	describeDBSubnetGroupsReturns struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}
	describeDBSubnetGroupsReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}
	CreateDBInstanceStub        func(input *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error)
	createDBInstanceMutex       sync.RWMutex
	createDBInstanceArgsForCall []struct {
		input *rds.CreateDBInstanceInput
	}
	createDBInstanceReturns struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}
	createDBInstanceReturnsOnCall map[int]struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}
	DescribeDBInstancesStub        func(input *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error)
	describeDBInstancesMutex       sync.RWMutex
	describeDBInstancesArgsForCall []struct {
		input *rds.DescribeDBInstancesInput
	}
	describeDBInstancesReturns struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}
	describeDBInstancesReturnsOnCall map[int]struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRDSService) DescribeDBSubnetGroups(input *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error) {
	fake.describeDBSubnetGroupsMutex.Lock()
	ret, specificReturn := fake.describeDBSubnetGroupsReturnsOnCall[len(fake.describeDBSubnetGroupsArgsForCall)]
	fake.describeDBSubnetGroupsArgsForCall = append(fake.describeDBSubnetGroupsArgsForCall, struct {
		input *rds.DescribeDBSubnetGroupsInput
	}{input})
	fake.recordInvocation("DescribeDBSubnetGroups", []interface{}{input})
	fake.describeDBSubnetGroupsMutex.Unlock()
	if fake.DescribeDBSubnetGroupsStub != nil {
		return fake.DescribeDBSubnetGroupsStub(input)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeDBSubnetGroupsReturns.result1, fake.describeDBSubnetGroupsReturns.result2
}

func (fake *FakeRDSService) DescribeDBSubnetGroupsCallCount() int {
	fake.describeDBSubnetGroupsMutex.RLock()
	defer fake.describeDBSubnetGroupsMutex.RUnlock()
	return len(fake.describeDBSubnetGroupsArgsForCall)
}

func (fake *FakeRDSService) DescribeDBSubnetGroupsArgsForCall(i int) *rds.DescribeDBSubnetGroupsInput {
	fake.describeDBSubnetGroupsMutex.RLock()
	defer fake.describeDBSubnetGroupsMutex.RUnlock()
	return fake.describeDBSubnetGroupsArgsForCall[i].input
}

func (fake *FakeRDSService) DescribeDBSubnetGroupsReturns(result1 *rds.DescribeDBSubnetGroupsOutput, result2 error) {
	fake.DescribeDBSubnetGroupsStub = nil
	fake.describeDBSubnetGroupsReturns = struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSService) DescribeDBSubnetGroupsReturnsOnCall(i int, result1 *rds.DescribeDBSubnetGroupsOutput, result2 error) {
	fake.DescribeDBSubnetGroupsStub = nil
	if fake.describeDBSubnetGroupsReturnsOnCall == nil {
		fake.describeDBSubnetGroupsReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBSubnetGroupsOutput
			result2 error
		})
	}
	fake.describeDBSubnetGroupsReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSService) CreateDBInstance(input *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error) {
	fake.createDBInstanceMutex.Lock()
	ret, specificReturn := fake.createDBInstanceReturnsOnCall[len(fake.createDBInstanceArgsForCall)]
	fake.createDBInstanceArgsForCall = append(fake.createDBInstanceArgsForCall, struct {
		input *rds.CreateDBInstanceInput
	}{input})
	fake.recordInvocation("CreateDBInstance", []interface{}{input})
	fake.createDBInstanceMutex.Unlock()
	if fake.CreateDBInstanceStub != nil {
		return fake.CreateDBInstanceStub(input)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDBInstanceReturns.result1, fake.createDBInstanceReturns.result2
}

func (fake *FakeRDSService) CreateDBInstanceCallCount() int {
	fake.createDBInstanceMutex.RLock()
	defer fake.createDBInstanceMutex.RUnlock()
	return len(fake.createDBInstanceArgsForCall)
}

func (fake *FakeRDSService) CreateDBInstanceArgsForCall(i int) *rds.CreateDBInstanceInput {
	fake.createDBInstanceMutex.RLock()
	defer fake.createDBInstanceMutex.RUnlock()
	return fake.createDBInstanceArgsForCall[i].input
}

func (fake *FakeRDSService) CreateDBInstanceReturns(result1 *rds.CreateDBInstanceOutput, result2 error) {
	fake.CreateDBInstanceStub = nil
	fake.createDBInstanceReturns = struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSService) CreateDBInstanceReturnsOnCall(i int, result1 *rds.CreateDBInstanceOutput, result2 error) {
	fake.CreateDBInstanceStub = nil
	if fake.createDBInstanceReturnsOnCall == nil {
		fake.createDBInstanceReturnsOnCall = make(map[int]struct {
			result1 *rds.CreateDBInstanceOutput
			result2 error
		})
	}
	fake.createDBInstanceReturnsOnCall[i] = struct {
		result1 *rds.CreateDBInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSService) DescribeDBInstances(input *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error) {
	fake.describeDBInstancesMutex.Lock()
	ret, specificReturn := fake.describeDBInstancesReturnsOnCall[len(fake.describeDBInstancesArgsForCall)]
	fake.describeDBInstancesArgsForCall = append(fake.describeDBInstancesArgsForCall, struct {
		input *rds.DescribeDBInstancesInput
	}{input})
	fake.recordInvocation("DescribeDBInstances", []interface{}{input})
	fake.describeDBInstancesMutex.Unlock()
	if fake.DescribeDBInstancesStub != nil {
		return fake.DescribeDBInstancesStub(input)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeDBInstancesReturns.result1, fake.describeDBInstancesReturns.result2
}

func (fake *FakeRDSService) DescribeDBInstancesCallCount() int {
	fake.describeDBInstancesMutex.RLock()
	defer fake.describeDBInstancesMutex.RUnlock()
	return len(fake.describeDBInstancesArgsForCall)
}

func (fake *FakeRDSService) DescribeDBInstancesArgsForCall(i int) *rds.DescribeDBInstancesInput {
	fake.describeDBInstancesMutex.RLock()
	defer fake.describeDBInstancesMutex.RUnlock()
	return fake.describeDBInstancesArgsForCall[i].input
}

func (fake *FakeRDSService) DescribeDBInstancesReturns(result1 *rds.DescribeDBInstancesOutput, result2 error) {
	fake.DescribeDBInstancesStub = nil
	fake.describeDBInstancesReturns = struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSService) DescribeDBInstancesReturnsOnCall(i int, result1 *rds.DescribeDBInstancesOutput, result2 error) {
	fake.DescribeDBInstancesStub = nil
	if fake.describeDBInstancesReturnsOnCall == nil {
		fake.describeDBInstancesReturnsOnCall = make(map[int]struct {
			result1 *rds.DescribeDBInstancesOutput
			result2 error
		})
	}
	fake.describeDBInstancesReturnsOnCall[i] = struct {
		result1 *rds.DescribeDBInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeRDSService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.describeDBSubnetGroupsMutex.RLock()
	defer fake.describeDBSubnetGroupsMutex.RUnlock()
	fake.createDBInstanceMutex.RLock()
	defer fake.createDBInstanceMutex.RUnlock()
	fake.describeDBInstancesMutex.RLock()
	defer fake.describeDBInstancesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRDSService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf_rds.RDSService = new(FakeRDSService)
